@import "config";

@import "gridlecss/mixins";
@import "gridlecss/media";

  [class*="cell"] {
    flex-basis: 100%;
    max-width: 100%;
  }

*,
*:before,
*:after {
  box-sizing: border-box;
}

.grid,
.grid--fluid {
  height: 100%;
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  display: flex;
}

.row {
  display: flex;
  flex: 1;
  flex-wrap: wrap;

  &-auto { flex: 0 1 auto; }

  &--reverse { flex-direction: row-reverse; }
}

%make-cell {
  display: flex;
  flex: 1 0 auto;
  flex-direction: column;
}

@each $breakpoint in $mq-breakpoints {

  $break: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);

  @mixin grid {
    @if $size == 0 { @content } @else {
      @include mq($from: $break) { @content }
    }
  }

  @include grid {

    @if $size == 0 { } @else {
      .grid {
        width: $size - 32px;
      }
    }

    @each $breakpoint in $mq-breakpoints {
      $b: nth($breakpoint, 1);

      @if $break == $b {

        .hidden-#{ $b } { display: none; }
        .visible-#{ $b } { display: block; }

      } @else {

        .hidden-#{ $b } { display: block; }
        .visible-#{ $b } { display: none; }

      }
    }

    @for $i from 1 through $grid-columns {

      .cell-#{ $break },
      .cell-#{ $break }-#{ $i },
      .cell-#{ $break }-offset-#{ $i } {
        @extend %make-cell;
      }
    }

    @for $i from 1 through $grid-columns {
      $grid-column-width: (( 100 / $grid-columns ) * $i ) * 1%;
      $grid-gutter-calc: $grid-gutter / ( $grid-gutter * 0 + 1 );

      .cell-#{ $break }-#{ $i } {
        flex-basis: $grid-column-width;
        max-width: $grid-column-width;
      }

      .cell-#{ $break }-offset-#{ $i } {
        margin-left: $grid-column-width;
      }
    }

    .cell-#{ $break } {
      flex: 1 0;
      // flex-basis: 0;
      // max-width: 100%;

      &-order {

        &--first { order: -1; }
        &--last { order: 1; }
      }

      &-auto {
        flex: 0 1 auto;
      }
    }


    @if $flex-alignment {
      @each $alignment in $flex-alignments {
        @include flex-alignments( ".align-#{ $break }-", nth($alignment, 1), nth($alignment, 2));
      }
    }
  }
}

@if $flex-distribution {
  @each $distribution in $flex-distributions {

    .distribute-#{ $distribution } {
      justify-content: space-#{ $distribution };
    }
  }
}

@if $flex-alignment {
  @each $alignment in $flex-alignments {
    @include flex-alignments( ".align-", nth($alignment, 1), nth($alignment, 2));
  }
}
